// ------
// Variables and configs
// ------
@use "sass:map";
$agrid-column-system: 12;
$agrid-breakpoints: (
  "xs": 576px,
  "sm": 640px,
  "md": 768px,
  "lg": 1024px,
  "xl": 1280px,
  "xxl": 1440px,
  "xxxl": 1536px,
) !default;

$agrid-gaps: () !default;
@for $i from 1 through $agrid-column-system {
  $agrid-gaps: map.set($agrid-gaps, $i, $i * 0.25rem);
}

// ------
// Grid setup
// ------

// Setup classic 12 cols grid
:where([class*="agrid"]) {
  display: grid;
  grid-template-columns: repeat(12, minmax(0, 1fr));
  gap: var(--agrid-gap, #{map.get($agrid-gaps, 2)});
  padding-inline: var(--agrid-x-padding, 0px);
  margin-inline: var(--agrid-x-margin, 0px);
  transition: gap 300ms ease-in-out;
}

// Setup grids with dynamic columns
@for $i from 1 through ($agrid-column-system - 1) {
  .agrid-#{$i} {
    grid-template-columns: repeat($i, minmax(0, 1fr));
  }
}
// Setup responsive dynamic columns grids
@each $key, $value in $agrid-breakpoints {
  @media (min-width: #{$value}) {
    @for $col-num from 1 through ($agrid-column-system - 1) {
      .#{$key}\:agrid-#{$col-num} {
        grid-template-columns: repeat($col-num, minmax(0, 1fr));
      }
    }
  }
}

// ------
// Gap setup and responsive values
// ------

@media (min-width: map.get($agrid-breakpoints, "sm")) {
  :where([class*="agrid"]) {
    --agrid-gap: #{map.get($agrid-gaps, 3)};
  }
}

@media (min-width: map.get($agrid-breakpoints, "md")) {
  :where([class*="agrid"]) {
    --agrid-gap: #{map.get($agrid-gaps, 4)};
  }
}

@media (min-width: map.get($agrid-breakpoints, "lg")) {
  :where([class*="agrid"]) {
    --agrid-gap: #{map.get($agrid-gaps, 5)};
  }
}

@media (min-width: map.get($agrid-breakpoints, "xxxl")) {
  :where([class*="agrid"]) {
    --agrid-gap: #{map.get($agrid-gaps, 6)};
  }
}
