// ------
// Variables and configs
// ------
@use "sass:map";
$agrid-column-system: 12;
$agrid-breakpoints: (
  "sm": 576px,
  "md": 768px,
  "lg": 992px,
  "xl": 1200px,
) !default;

$agrid-gaps: () !default;
@for $i from 1 through $agrid-column-system {
  $agrid-gaps: map.set($agrid-gaps, $i, $i * 0.25rem);
}

// ------
// Grid setup
// ------

// Setup classic 12 cols grid
:where([class*="agrid"]) {
  display: grid;
  grid-template-columns: repeat(12, minmax(0, 1fr));
  gap: var(--agrid-gap, #{map.get($agrid-gaps, 2)});
  padding-inline: var(--agrid-x-padding, 0px);
  margin-inline: var(--agrid-x-margin, 0px);
  transition: gap 300ms ease-in-out;
}

// Setup grids with dynamic columns
@mixin generate-static-light-grid {
  @for $i from 1 through ($agrid-column-system - 1) {
    .agrid-#{$i} {
      grid-template-columns: repeat($i, minmax(0, 1fr));
    }
  }
}
@include generate-static-light-grid();

// Setup responsive dynamic columns grids
@mixin generate-resp-light-grid {
  @each $key, $value in $agrid-breakpoints {
    @media (min-width: #{$value}) {
      @for $col-num from 1 through ($agrid-column-system - 1) {
        .#{$key}\:agrid-#{$col-num} {
          grid-template-columns: repeat($col-num, minmax(0, 1fr));
        }
      }
    }
  }
}
@include generate-resp-light-grid();

// ------
// Gap setup and responsive values
// ------

@media (min-width: 768px) {
  :where([class*="agrid"]) {
    --agrid-gap: #{map.get($agrid-gaps, 3)};
  }
}

@media (min-width: 992px) {
  :where([class*="agrid"]) {
    --agrid-gap: #{map.get($agrid-gaps, 4)};
  }
}

@media (min-width: 1200px) {
  :where([class*="agrid"]) {
    --agrid-gap: #{map.get($agrid-gaps, 5)};
  }
}
